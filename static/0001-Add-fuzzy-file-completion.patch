From b14555df1d60d7ce3cff54de523cf9eaaa68b002 Mon Sep 17 00:00:00 2001
From: Kevin Cao <kejcao@proton.me>
Date: Tue, 4 Jul 2023 23:41:09 -0400
Subject: [PATCH] Add fuzzy file completion

---
 bashline.h              |  3 +-
 lib/readline/complete.c | 31 ++++++++++++++
 lib/readline/fuzzy.h    | 95 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 128 insertions(+), 1 deletion(-)
 create mode 100644 lib/readline/fuzzy.h

diff --git a/bashline.h b/bashline.h
index d40228e2..393de130 100644
--- a/bashline.h
+++ b/bashline.h
@@ -21,7 +21,8 @@
 #if !defined (_BASHLINE_H_)
 #define _BASHLINE_H_
 
-#include "stdc.h"
+// why is this even here?
+// #include "stdc.h"
 
 extern int bash_readline_initialized;
 extern int hostname_list_initialized;
diff --git a/lib/readline/complete.c b/lib/readline/complete.c
index e5d224ed..9b720172 100644
--- a/lib/readline/complete.c
+++ b/lib/readline/complete.c
@@ -2176,6 +2176,10 @@ rl_complete_internal (int what_to_do)
   return 0;
 }
 
+#include "fuzzy.h"
+
+static bool _internal_do_fuzzy_search = false;
+
 /***************************************************************/
 /*							       */
 /*  Application-callable completion match generator functions  */
@@ -2216,6 +2220,8 @@ rl_completion_matches (const char *text, rl_compentry_func_t *entry_function)
   match_list = (char **)xmalloc ((match_list_size + 1) * sizeof (char *));
   match_list[1] = (char *)NULL;
 
+  if (entry_function == rl_filename_completion_function)
+    _internal_do_fuzzy_search = true;
   while (string = (*entry_function) (text, matches))
     {
       if (RL_SIG_RECEIVED ())
@@ -2246,6 +2252,28 @@ rl_completion_matches (const char *text, rl_compentry_func_t *entry_function)
       match_list[++matches] = string;
       match_list[matches + 1] = (char *)NULL;
     }
+  _internal_do_fuzzy_search = false;
+
+  if (matches && text[0] != '\0')
+    if (entry_function == rl_filename_completion_function)
+      {
+	int score[matches + 1], max = 0;
+	for (int i = 1; match_list[i]; ++i)
+	  {
+	    score[i] = fuzzy_match (match_list[i], text);
+	    max = max > score[i] ? max : score[i];
+	  }
+
+	int j = 0;
+	for (int i = 1; match_list[i]; ++i)
+	  if (score[i] > max - 6)
+	    match_list[++j] = match_list[i];
+	  else
+	    xfree (match_list[i]);
+	match_list[j+1] = NULL;
+	matches = j;
+      }
+
 
   /* If there were any matches, then look through them finding out the
      lowest common denominator.  That then becomes match_list[0]. */
@@ -2256,6 +2284,7 @@ rl_completion_matches (const char *text, rl_compentry_func_t *entry_function)
       xfree (match_list);
       match_list = (char **)NULL;
     }
+
   return (match_list);
 }
 
@@ -2601,6 +2630,8 @@ rl_filename_completion_function (const char *text, int state)
 	}
       else
 	{
+	  if (_internal_do_fuzzy_search)
+	    break;
 	  if (complete_fncmp (convfn, convlen, filename, filename_len))
 	    break;
 	}
diff --git a/lib/readline/fuzzy.h b/lib/readline/fuzzy.h
new file mode 100644
index 00000000..ad5c40f1
--- /dev/null
+++ b/lib/readline/fuzzy.h
@@ -0,0 +1,95 @@
+#include "bashline.h"
+
+static int
+max (int a, int b)
+{
+  return a > b ? a : b;
+}
+
+static int
+max4 (int a, int b, int c, int d)
+{
+  return max(max(max(a, b), c), d);
+}
+
+// `s1` is user input and `s2` is a filename both of which should be basenames,
+// not full paths. It uses a modified Smith–Waterman algorithm to fuzzy match.
+static int
+smith_waterman (const char *s1, const char *s2)
+{
+  // strictly match hidden files.
+  if (s1[0] == '.' && s2[0] != '.'
+  ||  s1[0] != '.' && s2[0] == '.')
+    return INT_MIN;
+  // always match empty `s1`.
+  if (s1[0] == '\0')
+    return INT_MAX;
+
+  // the star attaction: the Smith–Waterman algorithm.
+  int a[strlen (s1) + 1][strlen (s2) + 1];
+  for (int i = 0; i < strlen (s1) + 1; ++i)
+    a[i][0] = 0;
+  for (int i = 0; i < strlen (s2) + 1; ++i)
+    a[0][i] = 0;
+
+  bool matched[strlen (s1)];
+  memset (matched, false, strlen (s1));
+  int score = 0;
+  for (int i = 1; i < strlen (s1) + 1; ++i)
+    for (int j = 1; j < strlen (s2) + 1; ++j)
+      {
+	a[i][j] = max4 (
+	  a[i-1][j-1] + (s1[i-1] == s2[j-1] ? 3 : -3),
+	  a[i-1][j] - 2, a[i][j-1] - 2, 0
+	);
+	score = max (score, a[i][j]);
+	if (s1[i-1] == s2[j-1])
+	  matched[i-1] = true;
+      }
+
+  // reward prefix matches, especially in short words.
+  for (int i = 0; s1[i] && s2[i] && s1[i] == s2[i]; ++i)
+    score += (strlen (s2) <= 3 ? 9 : 3);
+
+  // reward matches after dots and spaces.
+  for (int i = 0; s2[i]; ++i)
+    if (s2[i] == '.' || s2[i] == ' ')
+      for (int j = 0; s1[j]; ++j)
+	{
+	  if (i+1 + j >= strlen (s2) || s1[j] != s2[i+1 + j])
+	    break;
+	  score += 3;
+	}
+
+  // every character in `s1` must be present in `s2`.
+  for (int i = 0; s1[i]; ++i)
+    if (!matched[i])
+      return INT_MIN;
+
+  // printf ("%3d | %s\n", score, s2); fflush (stdout);
+  return score;
+}
+
+int
+fuzzy_match (const char *a, const char *b)
+{
+  char s1[strlen (a) + 1], s2[strlen (b) + 1];
+  strcpy (s1, a);
+  strcpy (s2, b);
+  for (int i = 0; i < strlen (s1); ++i)
+    {
+      s1[i] = tolower (s1[i]);
+      if (s1[i] == '-')
+	s1[i] = '_';
+    }
+  for (int i = 0; i < strlen (s2); ++i)
+    {
+      s2[i] = tolower (s2[i]);
+      if (s2[i] == '-')
+	s2[i] = '_';
+    }
+  return smith_waterman (
+    basename (bash_dequote_text (s2)),
+    basename (bash_dequote_text (s1))
+  );
+}
-- 
2.41.0

